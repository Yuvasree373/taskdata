{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyML2BrzqQZui95oAccw1A9J"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"4p5eUpMOxNBB"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["# New Section"],"metadata":{"id":"4Ve3kKoPyLKU"}},{"cell_type":"code","source":["import pandas as pd\n"],"metadata":{"id":"JgRyW7C18JXR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n"],"metadata":{"id":"iKIXiCIK8XG3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n"],"metadata":{"id":"GubfBXX88dV3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns"],"metadata":{"id":"O0YCNoFj8qZ2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('/content/Titanic-Dataset.csv')"],"metadata":{"id":"9JFlMx7_9zeM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.to_csv('titanic.csv', index=False)"],"metadata":{"id":"ZRC5l7Ns_FDO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('titanic.csv')\n","\n"],"metadata":{"id":"7u9e8dsC_IQd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(df.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gmYtGfWT_WPi","executionInfo":{"status":"ok","timestamp":1748269668421,"user_tz":-330,"elapsed":60,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"a09aca63-5579-4163-a5e8-99c443dfade5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  \n"]}]},{"cell_type":"code","source":["# Check for null values\n","print(df.isnull().sum())\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rewrjqok_jCv","executionInfo":{"status":"ok","timestamp":1748269748261,"user_tz":-330,"elapsed":86,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"bccab1e3-e4d8-4e75-bebd-c5bf9f5172f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# Check data types\n","print(df.dtypes)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T8XELdOX_3f2","executionInfo":{"status":"ok","timestamp":1748269785702,"user_tz":-330,"elapsed":72,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"b3864937-0629-4a39-8c38-e9c53a8dd82c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["PassengerId      int64\n","Survived         int64\n","Pclass           int64\n","Name            object\n","Sex             object\n","Age            float64\n","SibSp            int64\n","Parch            int64\n","Ticket          object\n","Fare           float64\n","Cabin           object\n","Embarked        object\n","dtype: object\n"]}]},{"cell_type":"code","source":["#Step 2: Handle missing values\n","# Fill Age with mean\n","df['Age'].fillna(df['Age'].mean(), inplace=True)\n","\n","# Fill Embarked with the mode (most frequent value)\n","df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n","\n","# Drop Cabin due to too many missing values\n","df.drop(columns=['Cabin'], inplace=True)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5f_47PN4AAfK","executionInfo":{"status":"ok","timestamp":1748269911785,"user_tz":-330,"elapsed":83,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"ae425dd9-334b-4056-f18f-2bb10029a057"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-17-3a99a626452d>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Age'].fillna(df['Age'].mean(), inplace=True)\n","<ipython-input-17-3a99a626452d>:6: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n"]}]},{"cell_type":"code","source":["#step:1 checking all columns names\n","print(df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t6_JsxB0C8DX","executionInfo":{"status":"ok","timestamp":1748270583914,"user_tz":-330,"elapsed":26,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"89e5e734-6dd2-4668-c96b-345e4fee48b0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Age', 'SibSp', 'Parch',\n","       'Ticket', 'Fare', 'Sex_male', 'Embarked_Q', 'Embarked_S'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["#just the columns names\n","df['Embarked_Q'].fillna(df['Embarked_Q'].mode()[0], inplace=True)\n","df['Sex_male'].fillna(df['Sex_male'].mode()[0], inplace=True)\n","df = pd.get_dummies(df, columns=['Sex_male', 'Embarked_Q'], drop_first=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QhG3IGdrEQr6","executionInfo":{"status":"ok","timestamp":1748270963902,"user_tz":-330,"elapsed":27,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"7df05cd3-d5c0-4940-fcd9-215b7e063491"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-25-2ddc8e15e2cc>:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Embarked_Q'].fillna(df['Embarked_Q'].mode()[0], inplace=True)\n","<ipython-input-25-2ddc8e15e2cc>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Sex_male'].fillna(df['Sex_male'].mode()[0], inplace=True)\n"]}]},{"cell_type":"code","source":["#Step 4: Normalize/standardize numerical features\n","\n","\n","from sklearn.preprocessing import StandardScaler\n","numeric_cols=['Age','Fare']\n","\n","scaler = StandardScaler()\n","\n","# Only scale continuous numeric columns\n","df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n","print(df[numeric_cols].head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TuR4EhoEEnxu","executionInfo":{"status":"ok","timestamp":1748271279393,"user_tz":-330,"elapsed":92,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"a5575e55-0643-482e-c2f2-56c22f8cf89c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["        Age      Fare\n","0 -0.592481 -0.502445\n","1  0.638789  0.786845\n","2 -0.284663 -0.488854\n","3  0.407926  0.420730\n","4  0.407926 -0.486337\n"]}]},{"cell_type":"code","source":["#step:5 visualization and remove outliers\n","#boxplot to visualize outliers\n","plt.figure(figsize=(12, 5))\n","\n","# Age boxplot\n","plt.subplot(1, 2, 1)\n","sns.boxplot(y=df['Age'])\n","plt.title('Boxplot of Age')\n","\n","# Fare boxplot\n","plt.subplot(1, 2, 2)\n","sns.boxplot(y=df['Fare'])\n","plt.title('Boxplot of Fare')\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"DIad6mGgGCJs","executionInfo":{"status":"ok","timestamp":1748271488887,"user_tz":-330,"elapsed":572,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"fcdb02ee-ef8d-4751-9695-3260977b3a97"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#remove outliers using IQR method\n","# Define a function to remove outliers\n","def remove_outliers(df, column):\n","    Q1 = df[column].quantile(0.25)\n","    Q3 = df[column].quantile(0.75)\n","    IQR = Q3 - Q1\n","    lower = Q1 - 1.5 * IQR\n","    upper = Q3 + 1.5 * IQR\n","    return df[(df[column] >= lower) & (df[column] <= upper)]\n","\n","# Remove outliers from Age and Fare\n","df = remove_outliers(df, 'Age')\n","df = remove_outliers(df, 'Fare')\n","print(df[['Age', 'Fare']].describe())\n","print(df.shape)  # Check number of rows after outlier removal\n","print(df.head())  # Preview first few rows"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gBlFxYRZGgR3","executionInfo":{"status":"ok","timestamp":1748271721189,"user_tz":-330,"elapsed":89,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"14218ee2-83c6-4ec7-faa4-f44b03abffd9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                Age        Fare\n","count  6.380000e+02  638.000000\n","mean  -1.213868e-01   -0.356799\n","std    6.456785e-01    0.191532\n","min   -1.823750e+00   -0.648422\n","25%   -5.924806e-01   -0.490280\n","50%   -2.232906e-16   -0.452989\n","75%    1.001086e-01   -0.236541\n","max    1.485287e+00    0.299922\n","(638, 12)\n","   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","2            3         1       3   \n","4            5         0       3   \n","5            6         0       3   \n","8            9         1       3   \n","\n","                                                Name           Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris -5.924806e-01      1   \n","2                             Heikkinen, Miss. Laina -2.846632e-01      0   \n","4                           Allen, Mr. William Henry  4.079260e-01      0   \n","5                                   Moran, Mr. James -2.232906e-16      0   \n","8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) -2.077088e-01      0   \n","\n","   Parch            Ticket      Fare  Embarked_S  Sex_male_True  \\\n","0      0         A/5 21171 -0.502445        True           True   \n","2      0  STON/O2. 3101282 -0.488854        True          False   \n","4      0            373450 -0.486337        True           True   \n","5      0            330877 -0.478116       False           True   \n","8      2            347742 -0.424256        True          False   \n","\n","   Embarked_Q_True  \n","0            False  \n","2            False  \n","4            False  \n","5             True  \n","8            False  \n"]}]},{"cell_type":"code","source":["#replot to check\n","plt.figure(figsize=(12, 5))\n","sns.boxplot(data=df[['Age', 'Fare']])\n","plt.title('Boxplot After Outlier Removal')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"id":"cbbwN8jKHdlb","executionInfo":{"status":"ok","timestamp":1748271781624,"user_tz":-330,"elapsed":776,"user":{"displayName":"Yuva Shnee","userId":"12559134885002193452"}},"outputId":"d175c43b-2b4e-42b9-fdff-4c239a70473c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}